{"version":3,"sources":["Reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/NewBookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","book","id","uuid","concat","Object","toConsumableArray","filter","b","BookContext","createContext","BookContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","books","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","useContext","className","length","BookDetails","_ref","onClick","title","author","BookList","map","components_BookDetails","key","NewBookForm","_useState","useState","_useState2","setBook","onSubmit","e","preventDefault","placeholder","required","onChange","objectSpread","target","App","contexts_BookContext","components_Navbar","components_BookList","components_NewBookForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c23db2b.chunk.js","sourcesContent":["import uuid from \"uuid/v1\";\r\n\r\nexport const bookReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_BOOK\":\r\n      action.book.id = uuid();\r\n      return [...state, action.book];\r\n    case \"REMOVE_BOOK\":\r\n      return state.filter(b => b.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, {\n  createContext,\n  /*useState,*/ useReducer,\n  useEffect\n} from \"react\";\nimport { bookReducer } from \"../Reducers/bookReducer\";\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = props => {\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\n    const localData = localStorage.getItem(\"books\");\n    return localData ? JSON.parse(localData) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"books\", JSON.stringify(books));\n  }, [books]);\n\n  // const [books, setBooks] = useState([\n  //   { title: \"name of the wind\", author: \"patrick rothfuss\", id: 1 },\n  //   { title: \"the final empire\", author: \"brandon sanderson\", id: 2 }\n  // ]);\n  // const addBook = book => {\n  //   book.id = uuid();\n  //   setBooks([...books, book]);\n  // };\n  // const removeBook = id => {\n  //   setBooks(books.filter(book => book.id !== id));\n  // };\n\n  return (\n    <BookContext.Provider value={{ books, dispatch /*addBook, removeBook*/ }}>\n      {props.children}\n    </BookContext.Provider>\n  );\n};\n\nexport default BookContextProvider;\n","import React, { useContext } from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst Navbar = () => {\n  const { books } = useContext(BookContext);\n  return (\n    <div className=\"navbar\">\n      <h1>Ninja Reading List</h1>\n      <p>Currently you have {books.length} books to get through...</p>\n    </div>\n  );\n}\n \nexport default Navbar;","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst BookDetails = ({ book }) => {\r\n  const { /*removeBook*/ dispatch } = useContext(BookContext);\r\n  return (\r\n    <li\r\n      onClick={() =>\r\n        /*removeBook(book.id)*/ dispatch({ type: \"REMOVE_BOOK\", id: book.id })\r\n      }\r\n    >\r\n      <div className=\"title\"> {book.title}</div>\r\n      <div className=\"author\"> {book.author}</div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default BookDetails;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\nimport BookDetails from './BookDetails'\r\n\r\nconst BookList = () => {\r\n  const { books } = useContext(BookContext);\r\n  return(\r\n  books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map(book => {\r\n          return <BookDetails book={book} key={book.id}></BookDetails>;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to read. Hello free time:)</div>\r\n  ));\r\n};\r\n\r\nexport default BookList;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst NewBookForm = () => {\r\n  const { /*addBook*/ dispatch } = useContext(BookContext);\r\n  const [book, setBook] = useState({ title: \"\", author: \"\" });\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    //addBook(book);\r\n    dispatch({ type: \"ADD_BOOK\", book });\r\n    setBook({ title: \"\", author: \"\" });\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"book title\"\r\n        value={book.title}\r\n        required\r\n        onChange={e => setBook({ ...book, title: e.target.value })}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"author name\"\r\n        value={book.author}\r\n        required\r\n        onChange={e => setBook({ ...book, author: e.target.value })}\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewBookForm;\r\n","import React from 'react';\nimport Navbar from './components/Navbar';\nimport BookContextProvider from './contexts/BookContext';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/NewBookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList/>\n        <NewBookForm/>\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}